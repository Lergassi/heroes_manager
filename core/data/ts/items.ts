import {ArmorMaterialID} from '../../types/enums/ArmorMaterialID.js';
import {DebugNamespaceID} from '../../types/enums/DebugNamespaceID.js';
import {ItemCategoryID} from '../../types/enums/ItemCategoryID.js';
import {ItemID} from '../../types/enums/ItemID.js';
import {QualityID} from '../../types/enums/QualityID.js';
import _manual_created_items_data from '../json/items.json';
import {auto_generated_equip_db_data as _auto_generated_equip_db_data} from '../../../client/data/autogenerated_code/auto_generated_equip.js';
import _ from 'lodash';
import debug from 'debug';

//todo: Переделать в cameCase. И csv файл тоже.
export type TSDB_Item = {
    ID: ItemID;
    ItemCategoryID: ItemCategoryID;
    ArmorMaterialID: ArmorMaterialID;
    QualityID: QualityID;
    StackSize: number;
    ItemLevel: number;
    Strength: number;
    Agility: number;
    Intelligence: number;
    AttackPower: number;
    HealthPoints: number;
    DefaultBuyPrice?: number;
    DefaultSellPrice?: number;
    Equipable: boolean;
    TwoHandWeapon: boolean;
}

export type TSDB_ItemDB = {
    [ID in ItemID]?: TSDB_Item;
};

let csv_created_items_data = _manual_created_items_data as TSDB_ItemDB;
let auto_generated_equip_db_data = _auto_generated_equip_db_data as TSDB_ItemDB;

// console.log(csv_created_items_data);
// console.log(auto_generated_equip_db_data);

// let item
//
// let _items_db: TSDB_ItemDB = {
//     [ItemID.HealthPotion01] = {},
// };

let items_db: TSDB_ItemDB = _.assign(
    {},
    csv_created_items_data,
    auto_generated_equip_db_data,
);

// console.log('csv_created_items_data', csv_created_items_data);

export const items = {
    hasItem: function (ID: ItemID): boolean {
        return items_db.hasOwnProperty(ID);
    },
    itemCategory: function (ID: ItemID): ItemCategoryID {
        return items_db[ID]?.ItemCategoryID;
    },
    armorMaterial: function (ID: ItemID): ArmorMaterialID {
        console.log(ID, items_db[ID]);
        return items_db[ID]?.ArmorMaterialID ?? null;
    },
    qualityID: function (ID: ItemID): QualityID {
        return items_db[ID]?.QualityID;
    },
    stackSize: function (ID: ItemID): number {
        return items_db[ID]?.StackSize;
    },
    itemLevel: function (ID: ItemID): number {
        return items_db[ID]?.ItemLevel;
    },
    strength: function (ID: ItemID): number {
        return items_db[ID]?.Strength;
    },
    agility: function (ID: ItemID): number {
        return items_db[ID]?.Agility;
    },
    intelligence: function (ID: ItemID): number {
        return items_db[ID]?.Intelligence;
    },
    attackPower: function (ID: ItemID): number {
        return items_db[ID]?.AttackPower;
    },
    healthPoints: function (ID: ItemID): number {
        return items_db[ID]?.HealthPoints;
    },
    defaultBuyPrice: function (ID: ItemID): number {
        return items_db[ID]?.DefaultBuyPrice;
    },
    defaultSellPrice: function (ID: ItemID): number {
        return items_db[ID]?.DefaultSellPrice;
    },
    equipable: function (ID: ItemID): boolean {
        return items_db[ID]?.Equipable;
    },
    twoHandWeapon: function (ID: ItemID): Boolean {
        return items_db[ID]?.TwoHandWeapon;
    },
    debug: function () {
        debug(DebugNamespaceID.Debug)(items_db);
    },
};

//или
let _export = {
    find: function (ID: ItemID) {
        /*
        return _items[ID];
        где Item - один объект на всю систему. Или как обычная бд (не EntityManager) - возвращаются копии данных (запись sql).
        */
    }
};