import _ from 'lodash';
import {
    auto_generated_equip_recipes_db_data
} from '../../../client/data/autogenerated_code/auto_generated_equip_recipes.js';
import {ItemID} from '../../types/enums/ItemID.js';
import {ItemCount} from '../../types/main';

/**
 * @deprecated Не раскрывать типы используемые только внутри бд.
 */
export type TSDB_Recipe = {
    ID: ItemID,
    resultItemCount: number,
    // requireItems: {itemID: ItemID | string, count: number}[],
    requireItems: ItemCount[],
    productionCost: number,
};

/**
 * @deprecated Не раскрывать типы используемые только внутри бд.
 */
export type TSDB_RecipeDB = {
    [ID in ItemID]?: TSDB_Recipe;
};
/*
    кузнечное дело
        броня из метала         Breastplates, Gloves и другие категори + Plate
        всё оружие (пока тут)   Revolvers, OneHandedSwords и другие категории
        щиты                    Shields
    кожевничество
        броня из кожи           Breastplates, Gloves и другие категори + Leather
    портное дело
        броня из ткани          Breastplates, Gloves и другие категори + Cloth
    ювелирное дело
        ювелирные изделия       Amulets, Rings

    Breastplates - кузнечное дело
    //
    Breastplates - plate = bs
    Breastplates - leather = lw
    Breastplates - cloth = tl
    PlateArmor/LeatherArmor/ClothArmor?

    method(Breastplates, Plate) => bs
    method(Breastplates, Leather) => ls
    method(Breastplates, Cloth) => tl
    method(Revolvers) => bs
    //method(Revolvers, undefined) => bs
    method(Amulets) => jw

    armor().itemCategory(Breastplates, Plate)
    weapon().itemCategory(Breastplates)
    jewelry().itemCategory(Amulets)
    shields().itemCategory(Shields)
    //
    equip().itemCategory(ID)                    //общий для всего
    armor().itemCategory(Breastplates, Plate)   //для брони отдельный

    let profession = itemCategory(Breastplates)?.material(Plate);
*/

/*
Из расчетов добычи 60 в минуту.
 */
let recipes_db: TSDB_RecipeDB = {
    [ItemID.HealthPotion01]: {
        ID: ItemID.HealthPotion01,
        resultItemCount: 2,
        requireItems: [
            {itemID: ItemID.Herb01, count: 10},
            // {itemID: ItemID.Herb02, count: 5},
        ],
        productionCost: 0,
    },
    [ItemID.EndurancePotion01]: {
        ID: ItemID.EndurancePotion01,
        resultItemCount: 2,
        requireItems: [
            {itemID: ItemID.Herb01, count: 10},
            {itemID: ItemID.Herb02, count: 10},
        ],
        productionCost: 0,
    },
    [ItemID.IronIngot]: {
        ID: ItemID.IronIngot,
        resultItemCount: 1,
        requireItems: [
            {itemID: ItemID.IronOre, count: 2},
            {itemID: ItemID.Coal, count: 1},
        ],
        productionCost: 0,
    },
    [ItemID.CopperIngot]: {
        ID: ItemID.CopperIngot,
        resultItemCount: 1,
        requireItems: [
            {itemID: ItemID.CopperOre, count: 2},
            {itemID: ItemID.Coal, count: 1},
        ],
        productionCost: 0,
    },
    [ItemID.GoldIngot]: {
        ID: ItemID.GoldIngot,
        resultItemCount: 1,
        requireItems: [
            {itemID: ItemID.GoldOre, count: 2},
            {itemID: ItemID.Coal, count: 1},
        ],
        productionCost: 0,
    },
    [ItemID.Leather01]: {
        ID: ItemID.Leather01,
        resultItemCount: 1,
        requireItems: [
            {itemID: ItemID.Skin01, count: 5},
            {itemID: ItemID.CottonThread, count: 2},
        ],
        productionCost: 0,
    },
    [ItemID.CottonThread]: {
        ID: ItemID.CottonThread,
        resultItemCount: 5,
        requireItems: [
            {itemID: ItemID.Cotton, count: 10},
        ],
        productionCost: 0,
    },
    [ItemID.CottonCloth]: {
        ID: ItemID.CottonCloth,
        resultItemCount: 1,
        requireItems: [
            {itemID: ItemID.CottonThread, count: 5},
        ],
        productionCost: 0,
    },
};

recipes_db = _.assign({}, recipes_db, auto_generated_equip_recipes_db_data);

export const recipes = {
    hasRecipe(itemID: ItemID): boolean {
        return recipes_db.hasOwnProperty(itemID);
    },
    resultCount: function (ID: ItemID): number {
        return recipes_db[ID]?.resultItemCount ?? 0;
    },
    requireItems: function<T> (ID: ItemID, callback: (itemID: ItemID, count: number) => T): T[] {
        return _.map(recipes_db[ID]?.requireItems ?? [], (value) => {
            return callback(value.itemID as ItemID, value.count);
        });
    },
    cost(ID: ItemID): number {
        return recipes_db[ID]?.productionCost ?? 0;
    },
};